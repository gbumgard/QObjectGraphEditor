#ifndef NODEGRAPH_H
#define NODEGRAPH_H

#include "objectview_global.h"

#include <QGraphicsScene>
#include <QMap>
#include <QUndoStack>

#include "ObjectModel.h"

class Node;
class Edge;

class OBJECTVIEWSHARED_EXPORT Graph
  : public QGraphicsScene
{

  friend class Node;
  friend class AddObjectCommand;
  friend class RemoveObjectCommand;
  friend class AddConnectionCommand;
  friend class RemoveConnectionCommand;
  friend class SetObjectNodeSizeCommand;
  friend class SetObjectNodeGeometryCommand;
  friend class SetObjectPropertyCommand;

  Q_OBJECT

public:

  Graph(QObject* parent = nullptr);

  virtual ~Graph() {}

  /*
  bool open(const QString& dbFileName, const QString& dbDriverName = QStringLiteral("QSQLITE"));

  bool load(const QString& fileName);
  bool save(const QString& filename) const;

  bool loadPluginObjects(const QStringList& paths);
  */

  bool load(const QString& fileName);
  bool save(const QString& filename) const;

  ObjectModel* objectModel() { return &_model; }

  static qreal topZValue();

  void addObject(const QString& className, const QPointF& position);
  void removeObject(int objectId);

  void addConnection(int senderId, int signalIndex, int receiverId, int slotIndex);
  void removeConnection(int connectionId);

  void setObjectProperty(int objectId, const QString& propertyName, const QVariant &propertyValue);

  void setObjectNodeSize(int objectId, const QSizeF& size);
  void setObjectNodeGeometry(int objectId, const QRectF& geometry);

public slots:

  bool undo();
  bool redo();

private slots:

  void onObjectAdded(int objectId);
  void onObjectRemoved(int objectId);

  void onConnectionAdded(int connectionId);
  void onConnectionRemoved(ObjectModel::ConnectionId connectionId);

protected:

  int addObjectNode(int objectId, const QString& className, const QPointF& position);
  void removeObjectNode(int objectId);
  Node* getObjectNode(int objectId) const;

  Edge* addConnectionPath(int connectionId, int senderId, int signalIndex, int receiverId, int slotIndex);
  void removeConnectionPath(int connectionId);
  Edge* getConnectionPath(int connectionId) const;

  static double _topZValue;

  void mouseMoveEvent(QGraphicsSceneMouseEvent *event) override;
  void mousePressEvent(QGraphicsSceneMouseEvent *event) override;
  void mouseReleaseEvent(QGraphicsSceneMouseEvent *event) override;
  void dragEnterEvent(QGraphicsSceneDragDropEvent *event) override;
  void dragLeaveEvent(QGraphicsSceneDragDropEvent *event) override;
  void dropEvent(QGraphicsSceneDragDropEvent *event) override;
  void dragMoveEvent(QGraphicsSceneDragDropEvent *event) override;
  void keyReleaseEvent(QKeyEvent * keyEvent) override;

private:

  ObjectModel _model;

  QMap<int,Node*> _nodes;
  QMap<int,Edge*> _connectionPaths;

  QUndoStack _commandStack;

};

#endif // NODEGRAPH_H
