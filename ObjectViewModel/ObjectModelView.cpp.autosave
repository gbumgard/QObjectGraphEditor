#include "GraphicsItemMimeData.h"

#include <QApplication>
#include <QGraphicsSceneEvent>
#include <QGraphicsItem>
#include <QWidget>
#include <QMetaMethod>
#include <QDataStream>
#include <QDrag>
#include <QList>
#include <QUndoCommand>

#include "ObjectFactory.h"
#include "ObjectModel.h"
#include "ObjectModelView.h"
#include "GraphNode.h"
#include "SlotMimeData.h"
#include "SignalMimeData.h"
#include "GraphEdge.h"

#include <QDebug>


/**
 * \internal
 * @brief The AddObjectCommand class
 */
class AddObjectCommand : public QUndoCommand
{

public:

  /**
   * @brief AddObjectCommand
   * @param graph
   * @param className
   * @param position
   * @param parent
   */
  AddObjectCommand(ObjectModelView* graph,
                   const QString& className,
                   const QPointF& position,
                   QUndoCommand* parent = nullptr)
    : QUndoCommand(parent)
    , _graph(graph)
    , _objectId(-1)
    , _className(className)
    , _position(position)
  {
  }

  /**
   * @brief redo
   */
  void redo() override {
    qDebug() << Q_FUNC_INFO << _objectId << _className << _position;
    _graph->addObjectNode(_objectId, _className, _position);
  }

  /**
   * @brief undo
   */
  void undo() override {
    qDebug() << Q_FUNC_INFO << _objectId << _className << _position;
    _graph->removeObjectNode(_objectId);
  }

private:

  ObjectModelView* _graph;
  int _objectId;
  QString _className;
  QPointF _position;

};

/**
 * \internal
 * @brief The RemoveObjectCommand class
 */
class RemoveObjectCommand : public QUndoCommand
{

public:

  /**
   * @brief RemoveObjectCommand
   * @param graph
   * @param objectId
   * @param parent
   */
  RemoveObjectCommand(ObjectModelView* graph,
                      int objectId,
                      QUndoCommand* parent = nullptr)
    : QUndoCommand(parent)
    , _graph(graph)
    , _objectId(objectId)
    , _className()
    , _position()
  {
  }

  /**
   * @brief redo
   */
  void redo() override {
    qDebug() << Q_FUNC_INFO << _objectId << _className << _position;
    GraphNode* node = _graph->getObjectNode(_objectId);
    _className = node->object()->metaObject()->className();
    _position = node->pos();
    _graph->removeObjectNode(_objectId);
  }

  /**
   * @brief undo
   */
  void undo() override {
    qDebug() << Q_FUNC_INFO << _objectId << _className << _position;
    GraphNode* node = _graph->addObjectNode(_objectId, _className);
    node->setPos(_position);
  }

private:

  ObjectModelView* _graph;
  int _objectId;
  QString _className;
  QPointF _position;

};

/**
 * \internal
 * @brief The AddConnectionCommand class
 */
class AddConnectionCommand : public QUndoCommand
{

public:

  /**
   * @brief AddConnectionCommand
   * @param graph
   * @param senderId
   * @param signalIndex
   * @param receiverId
   * @param slotIndex
   * @param parent
   */
  AddConnectionCommand(ObjectModelView* graph,
                       int senderId,
                       int signalIndex,
                       int receiverId,
                       int slotIndex,
                       QUndoCommand* parent = nullptr)
    : QUndoCommand(parent)
    , _graph(graph)
    , _connectionId(-1)
    , _senderId(senderId)
    , _signalIndex(signalIndex)
    , _receiverId(receiverId)
    , _slotIndex(slotIndex)
  {
  }

  /**
   * @brief redo
   */
  void redo() override {
    qDebug() << Q_FUNC_INFO << _connectionId << _senderId << _signalIndex << _receiverId << _slotIndex;
    GraphEdge* cp = _graph->addConnectionPath(_connectionId,_senderId,_signalIndex,_receiverId,_slotIndex);
    _connectionId = cp->connectionId();
  }

  /**
   * @brief undo
   */
  void undo() override {
    qDebug() << Q_FUNC_INFO << _connectionId << _senderId << _signalIndex << _receiverId << _slotIndex;
    _graph->removeConnectionPath(_connectionId);
  }

private:

  ObjectModelView* _graph;
  int _connectionId;
  int _senderId;
  int _signalIndex;
  int _receiverId;
  int _slotIndex;

};

/**
 * \internal
 * @brief The RemoveConnectionCommand class
 */
class RemoveConnectionCommand : public QUndoCommand
{

public:

  /**
   * @brief RemoveConnectionCommand
   * @param graph
   * @param connectionId
   * @param parent
   */
  RemoveConnectionCommand(ObjectModelView* graph,
                          int connectionId,
                          QUndoCommand* parent = nullptr)
    : QUndoCommand(parent)
    , _graph(graph)
    , _connectionId(connectionId)
    , _senderId(-1)
    , _signalIndex(-1)
    , _receiverId(-1)
    , _slotIndex(-1)
  {
  }

  /**
   * @brief redo
   */
  void redo() override {
    qDebug() << Q_FUNC_INFO << _connectionId << _senderId << _signalIndex << _receiverId << _slotIndex;
    ObjectModel::Connection connection = _graph->objectModel()->getConnection(_connectionId);
    _senderId = connection.senderId;
    _signalIndex = connection.signalIndex;
    _receiverId = connection.receiverId;
    _slotIndex = connection.slotIndex;
    _graph->removeConnectionPath(_connectionId);
  }

  /**
   * @brief undo
   */
  void undo() override {
    qDebug() << Q_FUNC_INFO << _connectionId << _senderId << _signalIndex << _receiverId << _slotIndex;
    _graph->addConnectionPath(_connectionId,_senderId,_signalIndex,_receiverId,_slotIndex);
  }

private:

  ObjectModelView* _graph;
  int _connectionId;
  int _senderId;
  int _signalIndex;
  int _receiverId;
  int _slotIndex;

};


/**
 * \internal
 * @brief The SetObjectNodeGeometryCommand class
 */
class SetObjectNodeGeometryCommand : public QUndoCommand
{

public:

  /**
   * @brief SetObjectNodeGeometryCommand
   * @param graph
   * @param objectId
   * @param geometry
   * @param parent
   */
  SetObjectNodeGeometryCommand(ObjectModelView* graph,
                     int objectId,
                     const QRectF& geometry,
                     QUndoCommand* parent = nullptr)
    : QUndoCommand(parent)
    , _graph(graph)
    , _objectId(objectId)
    , _geometry(geometry)
  {
  }

  /**
   * @brief redo
   */
  void redo() override {
    qDebug() << Q_FUNC_INFO << _objectId << _geometry;
    GraphNode* node = _graph->getObjectNode(_objectId);
    QRectF geometry = node->geometry();
    node->object()->setProperty("x-node-geometry",QVariant(geometry));
    node->setGeometry(_geometry);
    _geometry = geometry;
  }

  /**
   * @brief undo
   */
  void undo() override {
    qDebug() << Q_FUNC_INFO << _objectId << _geometry;
    GraphNode* node = _graph->getObjectNode(_objectId);
    QRectF geometry = node->geometry();
    node->object()->setProperty("x-node-geometry",QVariant(geometry));
    node->setGeometry(_geometry);
    _geometry = geometry;
  }

private:

  ObjectModelView* _graph;
  int _objectId;
  QRectF _geometry;

};

/**
 * \internal
 * @brief The SetObjectNodeSizeCommand class
 */
class SetObjectNodeSizeCommand : public QUndoCommand
{

public:

  /**
   * @brief SetObjectNodeSizeCommand
   * @param graph
   * @param objectId
   * @param geometry
   * @param parent
   */
  SetObjectNodeSizeCommand(ObjectModelView* graph,
                 int objectId,
                 const QSizeF& size,
                 QUndoCommand* parent = nullptr)
    : QUndoCommand(parent)
    , _graph(graph)
    , _objectId(objectId)
    , _size(size)
  {
  }

  /**
   * @brief redo
   */
  void redo() override {
    qDebug() << Q_FUNC_INFO << _objectId << _size;
    GraphNode* node = _graph->getObjectNode(_objectId);
    QSizeF size = node->size();
    node->resize(_size);
    QRectF geometry = node->geometry();
    geometry.setSize(_size);
    node->object()->setProperty("x-node-geometry",QVariant(geometry));
    _size = size;
  }

  /**
   * @brief undo
   */
  void undo() override {
    qDebug() << Q_FUNC_INFO << _objectId << _size;
    GraphNode* node = _graph->getObjectNode(_objectId);
    QSizeF size = node->size();
    node->resize(_size);
    QRectF geometry = node->geometry();
    geometry.setSize(_size);
    node->object()->setProperty("x-node-geometry",QVariant(geometry));
    _size = size;
  }

private:

  ObjectModelView* _graph;
  int _objectId;
  QSizeF _size;

};


/**
 * @brief The SetObjectPropertyCommand class
 */
class SetObjectPropertyCommand : public QUndoCommand
{

public:

  /**
   * @brief SetPropertyValue
   * @param graph
   * @param objectId
   * @param propertyName
   * @param propertyValue
   * @param parent
   */
  SetObjectPropertyCommand(ObjectModelView* graph,
                     int objectId,
                     const QString& propertyName,
                     const QVariant& propertyValue,
                     QUndoCommand* parent = nullptr)
    : QUndoCommand(parent)
    , _objectId(objectId)
    , _propertyName(propertyName)
    , _propertyValue(propertyValue)
  {
  }

  /**
   * @brief redo
   */
  void redo() override {
    qDebug() << Q_FUNC_INFO << _objectId << _propertyName << _propertyValue;
    QObject* object = _graph->getObjectNode(_objectId)->object();
    const char* propertyName = _propertyName.toLatin1().constData();
    QVariant propertyValue = object->property(propertyName);
    object->setProperty(propertyName,_propertyValue);
    _propertyValue = propertyValue;
  }

  /**
   * @brief undo
   */
  void undo() override {
    qDebug() << Q_FUNC_INFO << _objectId << _propertyName << _propertyValue;
    QObject* object = _graph->getObjectNode(_objectId)->object();
    const char* propertyName = _propertyName.toLatin1().constData();
    QVariant propertyValue = object->property(propertyName);
    object->setProperty(propertyName,_propertyValue);
    _propertyValue = propertyValue;
  }

private:

  ObjectModelView* _graph;
  int _objectId;
  QString _propertyName;
  QVariant _propertyValue;

};


/**
 * @brief ObjectGraph::ObjectGraph
 * @param parent
 */
ObjectModelView::ObjectModelView(QObject* parent)
  : QGraphicsScene(parent)
{
  connect(this,&QGraphicsScene::selectionChanged,[this]() {
    qDebug() << "Selection changed:";
    for (auto i : selectedItems()) {
      //qDebug() << "item-rect" << i->boundingRect();
    }
  });

  connect(&_model,&ObjectModel::objectAdded,this,&ObjectModelView::onObjectAdded);
  connect(&_model,&ObjectModel::objectRemoved,this,&ObjectModelView::onObjectRemoved);
  connect(&_model,&ObjectModel::connectionAdded,this,&ObjectModelView::onConnectionAdded);
  connect(&_model,&ObjectModel::connectionRemoved,this,&ObjectModelView::onConnectionRemoved);
}

qreal ObjectModelView::topZValue() {
  static qreal top = 0;
  return top++;
}

bool ObjectModelView::undo() {
  _commandStack.undo();
  return _commandStack.index() != 0;
}

bool ObjectModelView::redo() {
  _commandStack.redo();
  return _commandStack.index() != _commandStack.count();
}

void ObjectModelView::addObject(const QString& className, const QPointF& position) {
  _commandStack.push(new AddObjectCommand(this,className,position));
}

void ObjectModelView::removeObject(int objectId) {
  _commandStack.push(new RemoveObjectCommand(this,objectId));
}

void ObjectModelView::addConnection(int senderId, int signalIndex, int receiverId, int slotIndex) {
  _commandStack.push(new AddConnectionCommand(this,senderId,signalIndex,receiverId,slotIndex));
}

void ObjectModelView::removeConnection(int connectionId) {
  _commandStack.push(new RemoveConnectionCommand(this,connectionId));
}

void ObjectModelView::setObjectProperty(int objectId, const QString& propertyName, const QVariant &propertyValue) {
  _commandStack.push(new SetObjectPropertyCommand(this, objectId, propertyName, propertyValue));
}

void ObjectModelView::setObjectNodeSize(int objectId, const QSizeF& size) {
  _commandStack.push(new SetObjectNodeSizeCommand(this, objectId, size));
}

void ObjectModelView::setObjectNodeGeometry(int objectId, const QRectF& geometry) {
  _commandStack.push(new SetObjectNodeGeometryCommand(this, objectId, geometry));
}

GraphNode* ObjectModelView::addObjectNode(int objectId, const QString &className, const QPointF& position) {
  if (objectId == -1 || !_model.hasObject(objectId)) {
    objectId = _model.addObject(objectId,className);
  }
  QObject* object = _model.object(objectId);
  GraphNode* objectNode = new GraphNode(object);
  objectNode->setPos(position);
  addItem(objectNode);
  _nodes.insert(objectId,objectNode);
  return objectNode;
}

void ObjectModelView::removeObjectNode(int objectId) {
  if (_model.hasObject(objectId)) {
    _model.removeObject(objectId);
  }
  GraphNode* objectNode = _nodes.take(objectId);
  if (objectNode) {
    removeItem(objectNode);
    objectNode->close();
  }
}

GraphNode* ObjectModelView::getObjectNode(int objectId) const {
  return _nodes[objectId];
}

GraphEdge* ObjectModelView::addConnectionPath(int connectionId,
                                               int senderId,
                                               int signalIndex,
                                               int receiverId,
                                               int slotIndex) {
  if (connectionId == -1 || !_model.hasConnection(connectionId)) {
    connectionId = _model.addConnection(connectionId,senderId,signalIndex,receiverId,slotIndex);
  }
  GraphEdge* connectionPath = new GraphEdge(connectionId);
  ObjectModel::Connection connection = _model.getConnection(connectionId);
  GraphNode* sender = _nodes[connection.senderId];
  GraphNode* receiver = _nodes[connection.receiverId];
  sender->bindToConnectionPoint(connection.signalIndex,connectionPath);
  receiver->bindToSlotConnectionPoint(connection.slotIndex,connectionPath);
  addItem(connectionPath);
  _edges.insert(connectionId,connectionPath);
  clearSelection();
  return connectionPath;
}

void ObjectModelView::removeConnectionPath(int connectionId) {
  if (_model.hasConnection(connectionId)) {
    _model.removeConnection(connectionId);
  }
  GraphEdge* connectionPath = _edges.take(connectionId);
  if (connectionPath) {
    removeItem(connectionPath);
    connectionPath->deleteLater();
  }
}

GraphEdge* ObjectModelView::getConnectionPath(int connectionId) const {
  return _edges[connectionId];
}

#if 0
bool ObjectScene::open(const QString &dbFileName, const QString &dbDriverName) {
  //qDebug() << Q_FUNC_INFO << dbFileName << dbDriverName;
  //return _db.open(dbFileName,dbDriverName);
  return false;
}

bool ObjectScene::loadPluginObjects(const QStringList& paths) {

  ObjectFactory::loadObjectFactoryPlugins(paths);

  if (_db.beginTransaction()) {
    QList<QString> names(ObjectFactory::names());
    for (auto name : names) {
      _db.insertNodeClass(ObjectFactory::getObjectType(name));
    }
    _db.endTransaction();
    return true;
  }
  return false;
}
#endif

void ObjectModelView::mouseMoveEvent(QGraphicsSceneMouseEvent *event) {
  event->ignore();
  QGraphicsScene::mouseMoveEvent(event);
}

void ObjectModelView::mousePressEvent(QGraphicsSceneMouseEvent *event) {
  QGraphicsScene::mousePressEvent(event);
}

void ObjectModelView::mouseReleaseEvent(QGraphicsSceneMouseEvent *event) {
  QGraphicsScene::mouseReleaseEvent(event);
}

void ObjectModelView::dragEnterEvent(QGraphicsSceneDragDropEvent *event) {
  QGraphicsScene::dragEnterEvent(event);
}

void ObjectModelView::dragLeaveEvent(QGraphicsSceneDragDropEvent *event) {
  QGraphicsScene::dragLeaveEvent(event);
}

void ObjectModelView::dropEvent(QGraphicsSceneDragDropEvent *event) {

  QGraphicsScene::dropEvent(event);

  const QMimeData* mimeData = event->mimeData();

  qDebug() << Q_FUNC_INFO << event->mimeData()->formats();

  if (mimeData->hasFormat(QStringLiteral("application/x-qstandarditemmodeldatalist"))) {
    if (event->dropAction() == Qt::CopyAction) {
      const QMimeData* mimeData = event->mimeData();
      if (mimeData->hasFormat(QStringLiteral("application/x-qstandarditemmodeldatalist"))) {
        QByteArray encoded = mimeData->data(QStringLiteral("application/x-qstandarditemmodeldatalist"));
        QDataStream stream(&encoded, QIODevice::ReadOnly);
        int row, col;
        while (!stream.atEnd()) {
          QMap<int,  QVariant> roleDataMap;
          stream >> row >> col >> roleDataMap;
          if (roleDataMap.contains(Qt::UserRole+1)) {
            QString className = roleDataMap[Qt::UserRole+1].toString();
            addObject(className,event->scenePos());
            event->acceptProposedAction();
          }
        }
      }
    }
  }
  /*
  else if (mimeData->hasFormat(SlotMimeData::MIME_TYPE)) {
    // Handle connection endpoint drag
    const SlotMimeData* slotMimeData = dynamic_cast<const SlotMimeData*>(mimeData);
    if (slotMimeData) {
      //qDebug() << Q_FUNC_INFO << "insert connection";
      Connection* connector = slotMimeData->connector();
      _connectionPaths.insert(connector->connectionId(),connector);
      event->acceptProposedAction();
    }
    QGraphicsScene::dropEvent(event);
  }
  else if (mimeData->hasFormat(SignalMimeData::MIME_TYPE)) {
    // Handle connection endpoint drag
    const SignalMimeData* signalMimeData = dynamic_cast<const SignalMimeData*>(mimeData);
    if (signalMimeData) {
      //qDebug() << Q_FUNC_INFO << "insert connection";
      Connection* connector = signalMimeData->connector();
      _connectionPaths.insert(connector->connectionId(),connector);
      event->acceptProposedAction();
    }
    QGraphicsScene::dropEvent(event);
  }
  else if (mimeData->hasFormat(ConnectionMimeData::MIME_TYPE)) {
    // Handle connection endpoint drag
    const ConnectionMimeData* connectionMimeData = dynamic_cast<const ConnectionMimeData*>(mimeData);
    if (connectionMimeData) {
      qDebug() << Q_FUNC_INFO
               << connectionMimeData->senderId()
               << connectionMimeData->signalIndex()
               << connectionMimeData->receiverId()
               << connectionMimeData->slotIndex();
      // The connection mime data instance was created in the connection point and must be deleted here.
      delete connectionMimeData;
      event->acceptProposedAction();
    }
    QGraphicsScene::dropEvent(event);
  }
  */
}

void ObjectModelView::dragMoveEvent(QGraphicsSceneDragDropEvent *event) {

  const QMimeData* mimeData = event->mimeData();

  //qDebug() << Q_FUNC_INFO << event->mimeData()->formats();

  if (mimeData->hasFormat(QStringLiteral("application/x-qstandarditemmodeldatalist"))) {

    // Handle object class drop test

    QByteArray encoded = mimeData->data(QStringLiteral("application/x-qstandarditemmodeldatalist"));
    QDataStream stream(&encoded, QIODevice::ReadOnly);
    int row, col;
    while (!stream.atEnd()) {
      QMap<int,  QVariant> roleDataMap;
      stream >> row >> col >> roleDataMap;
      //qDebug() << roleDataMap;
    }
    event->accept();

  }
  else if (mimeData->hasFormat(SlotMimeData::MIME_TYPE)) {
    // Handle connection endpoint drag
    const SlotMimeData* slotMimeData = dynamic_cast<const SlotMimeData*>(mimeData);
    if (slotMimeData) {
      qDebug() << Q_FUNC_INFO << "update connector signal endpoint to" << event->scenePos();
      GraphEdge* connectionPath = slotMimeData->edge();
      connectionPath->setSignalPosition(event->scenePos());
    }
    QGraphicsScene::dragMoveEvent(event);
  }
  else if (mimeData->hasFormat(SignalMimeData::MIME_TYPE)) {
    // Handle connection endpoint drag
    const SignalMimeData* signalMimeData = dynamic_cast<const SignalMimeData*>(mimeData);
    if (signalMimeData) {
      qDebug() << Q_FUNC_INFO << "update connector slot endpoint to" << event->scenePos();
      GraphEdge* connectionPath = signalMimeData->edge();
      connectionPath->setSlotPosition(event->scenePos());
    }
    QGraphicsScene::dragMoveEvent(event);
  }
  else if (mimeData->hasFormat(QStringLiteral("application/x-graphicswidgetref"))) {
    // Handle node box resize
    //qDebug() << Q_FUNC_INFO << mimeData->data(QStringLiteral("application/x-graphicswidgetref")) << event->pos() << event->scenePos();

    const GraphicsItemMimeData* dragMimeData = qobject_cast<const GraphicsItemMimeData*>(event->mimeData());
    if (dragMimeData) {
      GraphNode* node = dynamic_cast<GraphNode*>(dragMimeData->item());

      QRectF geom = node->geometry();
      double targetWidth = event->scenePos().x() - geom.left();
      double targetHeight = event->scenePos().y() - geom.top();
      QSizeF newSize(targetWidth,targetHeight);

      setObjectNodeSize(node->objectId(),newSize);
    }
  }
  else {
    QGraphicsScene::dragMoveEvent(event);
  }

}

void ObjectModelView::keyReleaseEvent(QKeyEvent * keyEvent)
{
  if(/*keyEvent->key() == Qt::Key_Backspace || */keyEvent->key() == Qt::Key_Delete) {
    QList<QGraphicsItem*> selection = selectedItems();
    for (QGraphicsItem* item : selection) {
      GraphNode* node = dynamic_cast<GraphNode*>(item);
      if (node) {
        removeObject(node->objectId());
      }
      else {
        GraphEdge* connectionPath = dynamic_cast<GraphEdge*>(item);
        if (connectionPath) {
          removeConnection(connectionPath->connectionId());
        }
      }
    }
  }
}

void ObjectModelView::onObjectAdded(int objectId) {
  addObjectNode(objectId,_model.className(objectId),QPointF());
  QObject* object = _model.object(objectId);
  GraphNode* objectNode = new GraphNode(object);
  QVariant v = object->property("x-node-geometry");
  if (v.isValid()) {
    objectNode->setGeometry(v.toRectF());
  }
  addItem(objectNode);
  _nodes.insert(objectId,objectNode);
  clearSelection();
}

void ObjectModelView::onObjectRemoved(int objectId) {
  qDebug() << Q_FUNC_INFO << objectId;
  GraphNode* objectNode = _nodes.take(objectId);
  if (objectNode) {
    removeItem(objectNode);
    objectNode->close();
  }
}

void ObjectModelView::onConnectionAdded(int connectionId) {
}

void ObjectModelView::onConnectionRemoved(int connectionId) {
  qDebug() << Q_FUNC_INFO << connectionId;
}

